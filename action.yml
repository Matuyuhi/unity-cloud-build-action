name: 'Unity Cloud Build Trigger'
description: 'Trigger a Unity Cloud Build for a given commit or branch.'
author: 'matuyuhi'
branding:
  icon: 'upload-cloud'
  color: 'green'
inputs:
  unity_org_id:
    description: 'Your Unity Organization ID'
    required: true
  unity_project_id:
    description: 'Your Unity Project ID'
    required: true
  build_target_id:
    description: 'Your Build Target ID'
    required: true
  authorization_header:
    description: 'Authorization header for Unity Cloud Build API (e.g. "Authorization: Basic ...")'
    required: true
  branch:
    description: 'Git branch to build (optional). If provided, will fetch latest SHA from this branch.'
    required: false
    default: ''
  clean:
    description: 'Whether to perform a clean build (true/false)'
    required: false
    default: 'false'
  platform:
    description: 'Build platform (e.g. standalonewindows64)'
    required: false
    default: 'standalonewindows64'
  machine_type_label:
    description: 'Machine type label for build (e.g. win_premium_v1)'
    required: false
    default: 'win_premium_v1'
outputs:
  build_id:
    description: 'The ID of the triggered build.'
    value: '${{ steps.trigger-build.outputs.build_id }}'
  platform:
    description: 'The platform of the build.'
    value: '${{ steps.trigger-build.outputs.platform }}'
runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies (`curl` / `jq`)
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y curl jq
    - name: Clean inputs (remove newlines)
      shell: bash
      run: |
        # Remove CR/LF from inputs and secrets
        AUTH_HEADER_CLEAN=$(printf '%s' "${{ inputs.authorization_header }}" | tr -d '\r\n')
        ORG_ID_CLEAN=$(printf '%s' "${{ inputs.unity_org_id }}" | tr -d '\r\n')
        PROJ_ID_CLEAN=$(printf '%s' "${{ inputs.unity_project_id }}" | tr -d '\r\n')
        TARGET_ID_CLEAN=$(printf '%s' "${{ inputs.build_target_id }}" | tr -d '\r\n')
        # Export cleaned values
        echo "AUTH_HEADER=$AUTH_HEADER_CLEAN" >> $GITHUB_ENV
        echo "ORG_ID=$ORG_ID_CLEAN"         >> $GITHUB_ENV
        echo "PROJ_ID=$PROJ_ID_CLEAN"       >> $GITHUB_ENV
        echo "TARGET_ID=$TARGET_ID_CLEAN"   >> $GITHUB_ENV

    - name: Trigger Unity Cloud Build
      id: trigger-build
      shell: bash
      env:
        AUTH_HEADER: ${{ env.AUTH_HEADER }}
        ORG_ID: ${{ env.ORG_ID }}
        PROJ_ID: ${{ env.PROJ_ID }}
        TARGET_ID: ${{ env.TARGET_ID }}
      run: |
        # Determine clean flag as JSON boolean
        if [ "${{ inputs.clean }}" = "true" ]; then
          CLEAN_FLAG=true
        else
          CLEAN_FLAG=false
        fi

        # Prepare JSON payload
        PAYLOAD=$(jq -n \
          --arg branch "${{ inputs.branch }}" \
          --argjson clean "$CLEAN_FLAG" \
          '{ clean: $clean, delay: 0, branch: $branch }')

        # Build URL into a single variable to avoid line-break issues
        URL="https://build-api.cloud.unity3d.com/api/v1/orgs/${ORG_ID}/projects/${PROJ_ID}/buildtargets/${TARGET_ID}/builds"

        # Trigger the build
        RESPONSE_CODE=$(curl -s -w "%{http_code}" -o response.json \
        -X POST \
        -H "${AUTH_HEADER}" \
        -H "Content-Type: application/json" \
        "$URL" \
        -d "$PAYLOAD")

        if [[ "$RESPONSE_CODE" =~ ^2 ]]; then
          echo "response::$(cat response.json)"
          BUILD_ID=$(jq -r '.[0].build' response.json)
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT
          PLATFORM=$(jq -r '.[0].platform' response.json)
          echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "::notice ::Build triggered successfully. ID=$BUILD_ID"
        else
          ERROR_MSG=$(jq -r '.error' response.json)
          echo "::error ::Failed to trigger build: HTTP $RESPONSE_CODE â€“ $ERROR_MSG"
          exit 1
        fi
      # NOTE: you can reference outputs.build_id in the calling workflow
